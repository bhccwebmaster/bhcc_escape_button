<?php

/**
 * @file
 * Contains code to refill escape button caches when cache has been cleared.
 */

use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;

const BHCC_ESCAPE_BUTTON_LOG_DESCRIPTOR = 'bhcc escape button - cache rebuild';

/**
 * Rebuild data based upon refreshed caches.
 *
 * This hook retrieved the escape button module history pages
 * so that they are stored in cache and ready to use immediately
 * when the exit button is used.
 */
function bhcc_escape_button_rebuild() {

  $historyItems = [];
  $fallbackHost = '';

  $isHostDefault = \Drupal::request()->getHost();
  if ($isHostDefault == 'default' && Settings::get('bhcc_host_uri')) {
    $fallbackHost = Settings::get('bhcc_host_uri');
  }

  // Check if the domain is available - if not exit.
  try {
    $client = new Client();
    $homeUrl = '';
    if (empty($fallbackHost)) {
      $homeUrl = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
    }
    else {
      $homeUrl = Url::fromRoute($fallbackHost);
    }
    $client->get($homeUrl);
  }
  catch (RequestException $e) {
    \Drupal::logger(BHCC_ESCAPE_BUTTON_LOG_DESCRIPTOR)->warning("The requested domain is not available:- " . $e->getMessage());
    return FALSE;
  }

  // Get the list of history items.
  $entity_type_manager = \Drupal::entityTypeManager();
  $escape_buttons = $entity_type_manager->getStorage('block')->loadByProperties([
    'plugin' => 'escape_button_block',
  ]);

  foreach ($escape_buttons as $escape_button) {

    if ($escape_button) {
      $settings = $escape_button->get('settings');
      $historyItems = $settings['history'];
    }
    // @todo test if $historyItems[] is emtpy or null
    // cycle through and request to get them cached
    foreach ($historyItems as $historyNodeID) {
      Node::load($historyNodeID);
      try {
        $client = new Client();
        $current_url = Url::fromRoute('entity.node.canonical', ['node' => $historyNodeID], ['absolute' => TRUE])->toString();
        \Drupal::logger(BHCC_ESCAPE_BUTTON_LOG_DESCRIPTOR)->notice('Cache refreshed for node:=' . $historyNodeID);
        $client->get($current_url);
      }
      catch (Exception $e) {
        \Drupal::logger(BHCC_ESCAPE_BUTTON_LOG_DESCRIPTOR)->error('node:=' . $historyNodeID . ', ' . $e->getMessage());
      }
    }
  }
}
